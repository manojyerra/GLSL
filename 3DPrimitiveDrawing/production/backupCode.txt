
Totla triangles in STL file               : ‭32,15,090‬
Totla unique triangles ids in result file : 10,29,771

Max triangle id in result file            : 32,14,993
Min triangle id in result file            : 0

////////////////////////////////////////////////
#include "FileReader.h"
#include <set>

FileReader fr("data/triangle-Ids.txt", "rb");

char* line = nullptr;
unsigned int min = -1;
unsigned int max = -1;

set<unsigned int> uniqueTriIDS;

while ( (line = fr.ReadLine()) != nullptr)
{
	unsigned int num = atoi(line);

	uniqueTriIDS.insert(num);

	if (num < min || min == -1)
	{
		min = num;
	}

	if (num > max || max == -1)
	{
		max = num;
	}
}

printf("\nTotal unique triangle ids : %d", uniqueTriIDS.size());
////////////////////////////////////////////////




normal float array size = 28935810
number of normals  = 28935810/3 = 9445270
number of triangles = 9445270/3 = 3215090


74471472/4
vertex float array size = 18617868‬

number of vertex = 18617868 / 3 = 


#version 450

uniform vec3 lightPos;
uniform vec4 ambient;
uniform vec4 specular;
uniform float shininess;

uniform float alpha;

layout (location = 0) in vec3 V;
layout (location = 1) in vec3 N;
layout (location = 2) in vec3 colorVary;

layout (location = 0) out vec4 outColor;

void main(void)
{
	vec3 L = normalize( lightPos - V );
	vec3 E = normalize(-V); // we are in Eye Coordinates, so EyePos is (0,0,0)  
	vec3 R = normalize(-reflect(L,N)); 

	vec4 diffuse = vec4(colorVary, 1.0);
	vec4 Iamb = vec4(0.5, 0.5, 0.5, 1.0);
	vec4 Idiff = diffuse * max(dot(R,E), 0.4) * 1.3;
	vec4 Ispec = specular * pow(max(dot(R,E),0.0), shininess*0.3);

	outColor = vec4( vec3( Idiff ), alpha );
}



PHONG_COLOR_SHADER

#version 450

uniform vec3 lightPos;
uniform vec4 ambient;
uniform vec4 specular;
uniform float shininess;

uniform float alpha;

layout (location = 0) in vec3 V;
layout (location = 1) in vec3 N;
layout (location = 2) in vec3 colorVary;

layout (location = 0) out vec4 outColor;

void main(void)
{
	vec3 L = normalize( lightPos - V );
	vec3 E = normalize(-V); // we are in Eye Coordinates, so EyePos is (0,0,0)  
	vec3 R = normalize(-reflect(L,N)); 

	vec4 diffuse = vec4(colorVary, 1.0);
	vec4 Iamb = ambient;
	vec4 Idiff = diffuse * max(abs(dot(R,E)), 0.3) * 1.2;
	vec4 Ispec = specular * pow(max(dot(R,E),0.0), shininess*0.3);

	outColor = vec4( vec3(Iamb + Idiff + Ispec), alpha );
}








//glm::vec3 v1(0.0f, 0.0f, 0.0f);
//glm::vec3 v2(0.0f, 5.0f, 0.0f);
//glm::vec3 v3(5.0f, 0.0f, 0.0f);

//_triangle = new Triangle(v1, v2, v3);

//_box = new Box(0, 0, 0, 2, 3, 4);
//_box->SetSize(3, 1, 6);
//_box->SetPos(-10, 0, -10);

//_cylinder = new Cylinder(0, 0, 0, 3, 2);
//_cylinder->SetRadius(1.5);
//_cylinder->SetHeight(2);
//_cylinder->SetPos(0, 0, -10);

//_cone = new Cone(0, 0, 0, 2, 3);
//_cone->SetRadius(1.5);
//_cone->SetHeight(2);
//_cone->SetPos(-5, 0, -10);

//_sphere = new Sphere(0, 0, 0, 2);
//_sphere->SetPos(5, 0, 0);
//_sphere->SetRadius(5);
	
	
//"AdvancedRendererInputFiles/checkedAuto_solidMesh_exported.stl"




void ECoatParticleDataMgr::ApplyContour(int frameNum)
{
	long startTime = Platform::GetTimeInMillis();

	if (_particleRenderer)
	{
		FrameInfo frameInfo = _resultFileReader->GetThicknessBuffer(frameNum);

		float minThick = frameInfo.minThickness;
		float maxThick = frameInfo.maxThickness;
		float totDiffThick = maxThick - minThick;
		unsigned int numThicknessVals = frameInfo.bufferSize / sizeof(float);
		float* thicknessBuf = (float*)frameInfo.buffer;

		unsigned int colorBufSize = numThicknessVals * 3;
		char* colorBuf = (char*)malloc(colorBufSize);

		float* allColorsVecR = _colorBar->allColorsVecR;
		float* allColorsVecG = _colorBar->allColorsVecG;
		float* allColorsVecB = _colorBar->allColorsVecB;

		//TODO: 1000.0f should be taken from ColorBar class.
		float factor = 1000.0f / totDiffThick;

		for (int i = 0; i < numThicknessVals; i++)
		{
			int ii = i * 3;

			int index = (int)((thicknessBuf[i] - minThick) * factor);

			colorBuf[ii + 0] = allColorsVecR[index] * 255;
			colorBuf[ii + 1] = allColorsVecG[index] * 255;
			colorBuf[ii + 2] = allColorsVecB[index] * 255;
		}

		if (_particleRenderer)
		{
			//glm::vec3 carCenter = _assetsBuilder->GetSolid()->GetAABB().Center();
			//glm::vec3 particleCenter = _particleRenderer->GetBBoxCenter();

			//glm::vec3 delta = carCenter - particleCenter;

			_particleRenderer->UpdateColorBuffer(colorBuf, colorBufSize);
			//_particleRenderer->SetPosition(delta.x, delta.y, delta.z);
		}

		free(colorBuf);
		free(thicknessBuf);
	}

	Platform::debugPrint("\nTime for applying contour : %ld", Platform::GetTimeInMillis() - startTime);
}




/*
glfwWindowHint(GLFW_RED_BITS, mode->redBits);
glfwWindowHint(GLFW_GREEN_BITS, mode->greenBits);
glfwWindowHint(GLFW_BLUE_BITS, mode->blueBits);
glfwWindowHint(GLFW_REFRESH_RATE, mode->refreshRate);
glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
glfwMaximizeWindow(window);
std::cout << glGetString(GL_VERSION) << std::endl;
*/


//for(int i=0; i<argc; i++)
//	Platform::debugPrint("\nargv = %s", argv[i]);

//glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE); //supported from 3.3 version
//glfwWindowHint(GLFW_DEPTH_BITS, 24);
//glfwWindowHint(GLFW_ALPHA_BITS, 8);
//glfwWindowHint(GLFW_SRGB_CAPABLE, GLFW_TRUE);
//TODO: How to change number of samples runtime and disable/enable sampling runtime ( mainly for while drawing an object ).
//glfwWindowHint(GLFW_SAMPLES, 8);







//
//glm::vec3 sCol(0.0f, 0.0f, 255.0f);
//glm::vec3 eCol(255.0f, 0.0f, 0.0f);
//
//float totDiffR = eCol.r - sCol.r;
//float totDiffG = eCol.g - sCol.g;
//float totDiffB = eCol.b - sCol.b;
//
//float factorR = totDiffR / totDiffThick;
//float factorG = totDiffG / totDiffThick;
//float factorB = totDiffB / totDiffThick;
//
//for (int i = 0; i < numThicknessVals; i++)
//{
//	int ii = i * 3;
//
//	colorBuf[ii + 0] = sCol.r + factorR * thickness;
//	colorBuf[ii + 1] = sCol.g + factorG * thickness;
//	colorBuf[ii + 2] = sCol.b + factorB * thickness;
//
//	float r = 0;
//	float g = 0;
//	float b = 0;
//
//	_colorBar->GetColor(thickness, &r, &g, &b);
//
//	colorBuf[ii + 0] = r * 255;
//	colorBuf[ii + 1] = g * 255;
//	colorBuf[ii + 2] = b * 255;
//}
//



#include "glm/glm.hpp"


glm::vec3 GetPointOnPlane(glm::vec3 point, glm::vec3 normal)
{
	normal = glm::normalize(normal);

	glm::vec3 norOnRot;

	if (normal.x <= normal.y && normal.x <= normal.z)
	{
		norOnRot = glm::vec3(normal.x, -normal.z, normal.y);
	}
	else if(normal.y <= normal.z)
	{
		norOnRot = glm::vec3(normal.z, -normal.y, -normal.x);
	}
	else
	{
		norOnRot = glm::vec3(-normal.y, normal.x, normal.z);
	}

	return (point + norOnRot);
}

GameLoop::GameLoop(float sw, float sh, int argc, char** argv)
{
	//glm::vec3 point1 = GetPointOnPlane(glm::vec3(0, 0, 0), glm::vec3(0, 1, 0));
	//glm::vec3 point2 = GetPointOnPlane(glm::vec3(5, 1, 0), glm::vec3(0, 7, 0));
	//glm::vec3 point3 = GetPointOnPlane(glm::vec3(0, 0, 0), glm::vec3(1, 0, 0));
	//glm::vec3 point4 = GetPointOnPlane(glm::vec3(0, 0, 0), glm::vec3(1, 0, 0));
	//glm::vec3 point5 = GetPointOnPlane(glm::vec3(0, 0, 0), glm::vec3(1, 0, 0));
	//glm::vec3 point6 = GetPointOnPlane(glm::vec3(0, 0, 0), glm::vec3(1, 0, 0));

	ModulesManager::GetInstance()->Init(sw, sh, argc, argv, ModulesManager::ECOAT_POST_PROCESSING_MODULE);
}